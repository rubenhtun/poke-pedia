{"ast":null,"code":"var _jsxFileName = \"/media/ruben/0912D149477F5133/Reben.Dev/React-Master/poke-pedia/src/contexts/ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(undefined);\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [theme, setTheme] = useState(\"light\");\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === \"light\" ? \"dark\" : \"light\");\n  };\n  useEffect(() => {\n    document.body.className = theme;\n  }, [theme]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"lm84LOZxHN0YC4jzvAwAP/18Sno=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","ThemeContext","undefined","ThemeProvider","children","_s","theme","setTheme","toggleTheme","prevTheme","document","body","className","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","$RefreshReg$"],"sources":["/media/ruben/0912D149477F5133/Reben.Dev/React-Master/poke-pedia/src/contexts/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [theme, setTheme] = useState<Theme>(\"light\");\n\n  const toggleTheme = () => {\n    setTheme((prevTheme) => (prevTheme === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  useEffect(() => {\n    document.body.className = theme;\n  }, [theme]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS9E,MAAMC,YAAY,gBAAGN,aAAa,CAA+BO,SAAS,CAAC;AAE3E,OAAO,MAAMC,aAAsD,GAAGA,CAAC;EACrEC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAQ,OAAO,CAAC;EAElD,MAAMY,WAAW,GAAGA,CAAA,KAAM;IACxBD,QAAQ,CAAEE,SAAS,IAAMA,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;EACrE,CAAC;EAEDX,SAAS,CAAC,MAAM;IACdY,QAAQ,CAACC,IAAI,CAACC,SAAS,GAAGN,KAAK;EACjC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,oBACEN,OAAA,CAACC,YAAY,CAACY,QAAQ;IAACC,KAAK,EAAE;MAAER,KAAK;MAAEE;IAAY,CAAE;IAAAJ,QAAA,EAClDA;EAAQ;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACb,EAAA,CAlBWF,aAAsD;AAAAgB,EAAA,GAAtDhB,aAAsD;AAoBnE,OAAO,MAAMiB,QAAQ,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC5B,MAAMC,OAAO,GAAGzB,UAAU,CAACI,YAAY,CAAC;EACxC,IAAIqB,OAAO,KAAKpB,SAAS,EAAE;IACzB,MAAM,IAAIqB,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,QAAQ;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}